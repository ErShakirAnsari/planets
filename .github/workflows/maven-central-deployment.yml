name: Maven Central Deployment

on:
  schedule:
    - cron: "0 1 * * *" # every day 1am UTC/6.30am GMT+5.30
  workflow_dispatch:
    inputs:
      version:
        description: Tag Version (WITHOUT prefix v)
        required: true

jobs:
  build-publish:
    name: Build & maven publish
    runs-on: ubuntu-latest
    steps:
      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Code checkout for ${{ env.date_today }}
        uses: actions/checkout@v4.1.7

        # DO NOT USE CONTAINER, else gpg sign step will fail
      - name: Setup Java JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'corretto'
          # Set this in pom.xml
          server-id: ossrh-ershakiransari
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Versioning artifact for ${{ env.date_today }}
        run: mvn clean versions:set -DnewVersion=${{ env.date_today }} -DgenerateBackupPoms=false

      - name: Building artifact for ${{ env.date_today }}
        run: mvn clean package --no-transfer-progress

      - name: Publish ${{ env.date_today }} to the Maven Central Repository
        run: mvn deploy -P release -Dmaven.test.skip=true --no-transfer-progress -e
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}

  tag-release:
    needs: build-publish
    name: Git tag & release
    runs-on: ubuntu-latest
    container: ershakiransari/jdk:17-mvn3
    steps:
      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Code checkout for ${{ env.date_today }}
        uses: actions/checkout@v3

      - name: Versioning artifact for ${{ env.date_today }}
        run: mvn clean versions:set -DnewVersion=${{ env.date_today }} -DgenerateBackupPoms=false

      - name: Building artifact for ${{ env.date_today }}
        run: mvn clean package --no-transfer-progress

      # Creating A Release
      - name: Creating Release ${{ env.date_today }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.date_today }}
          release_name: Version v${{ env.date_today }}
          body: |
            - Build Number: ${{ github.run_number }}
            - Released on ${{ env.date_today }}
          draft: false
          prerelease: false

      # Attaching artifact to release
      - name: Attaching artifacts to release earth-v${{ env.date_today }}.jar
        id: attaching-earth
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./earth/target/earth.jar
          asset_name: earth-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release jupiter-v${{ env.date_today }}.jar
        id: attaching-jupiter
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jupiter/target/jupiter.jar
          asset_name: jupiter-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release mars-v${{ env.date_today }}.jar
        id: attaching-mars
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mars/target/mars.jar
          asset_name: mars-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release mercury-v${{ env.date_today }}.jar
        id: attaching-mercury
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mercury/target/mercury.jar
          asset_name: mercury-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release neptune-v${{ env.date_today }}.jar
        id: attaching-neptune
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./neptune/target/neptune.jar
          asset_name: neptune-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release saturn-v${{ env.date_today }}.jar
        id: attaching-saturn
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./saturn/target/saturn.jar
          asset_name: saturn-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release uranus-v${{ env.date_today }}.jar
        id: attaching-uranus
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./uranus/target/uranus.jar
          asset_name: uranus-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

      # Attaching artifact to release
      - name: Attaching artifacts to release venus-v${{ env.date_today }}.jar
        id: attaching-venus
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./venus/target/venus.jar
          asset_name: venus-v${{ env.date_today }}.jar
          asset_content_type: application/java-archive

